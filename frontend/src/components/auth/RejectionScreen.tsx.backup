import React, { useState, useEffect } from 'react';
import { XCircle, RefreshCw, AlertTriangle, Edit, User, Mail, Building, MapPin, Phone, Globe, Loader2, CheckCircle, ArrowRight, ArrowLeft, DollarSign, TrendingUp, Target, FileText } from 'lucide-react';
import authEnhancedService, { EnhancedSignupRequest } from '../../services/authEnhanced';

interface RejectionScreenProps {
  userEmail?: string;
  userRole?: 'investor' | 'project_owner';
  rejectionReason?: string;
  userData?: any;
  onBackToLogin?: () => void;
  onResubmissionSuccess?: () => void;
}

export const RejectionScreen: React.FC<RejectionScreenProps> = ({
  userEmail = '',
  userRole = 'investor',
  rejectionReason = '',
  userData = {},
  onBackToLogin,
  onResubmissionSuccess
}) => {
  const [showResubmissionForm, setShowResubmissionForm] = useState(false);
  const [formData, setFormData] = useState<EnhancedSignupRequest>({
    email: userData.email || userEmail,
    password: '',
    first_name: userData.first_name || '',
    last_name: userData.last_name || '',
    user_type: userData.user_type || userRole,
    company: userData.company || '',
    location: userData.location || '',
    phone_number: userData.phone_number || '',
    telegram_handle: userData.telegram_handle || '',
    website_url: userData.website_url || '',
    linkedin: userData.linkedin || '',
    investment_focus: userData.investment_focus || '',
    preferred_category: userData.preferred_category || '',
    investment_range: userData.investment_range || '',
    current_portfolio_size: userData.current_portfolio_size || '',
    past_investments: userData.past_investments || ''
  });

  const [experienceLevel, setExperienceLevel] = useState<string>('intermediate');
  const [investmentFocusList, setInvestmentFocusList] = useState<string[]>([]);
  const [accreditedInvestor, setAccreditedInvestor] = useState<boolean>(false);
  const [bio, setBio] = useState<string>(userData.bio || '');

  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [errors, setErrors] = useState<{[key: string]: string}>({});

  // Investment categories and ranges (same as signup form)
  const investmentCategories = [
    'Technology', 'Healthcare', 'Finance', 'Real Estate', 'Energy',
    'Education', 'Retail', 'Manufacturing', 'Agriculture', 'Transportation'
  ];

  const investmentRanges = [
    '$1K - $10K', '$10K - $50K', '$50K - $100K', '$100K - $500K', '$500K+'
  ];

  const portfolioSizes = [
    'First time investor', '1-5 investments', '6-15 investments', '16-30 investments', '30+ investments'
  ];

  const experienceLevels = [
    { value: 'beginner', label: 'Beginner', description: 'New to investing' },
    { value: 'intermediate', label: 'Intermediate', description: '1-3 years experience' },
    { value: 'experienced', label: 'Experienced', description: '3-7 years experience' },
    { value: 'expert', label: 'Expert', description: '7+ years experience' },
  ];

  const investmentFocusOptions = [
    'Early Stage (Pre-Seed, Seed)',
    'Growth Stage (Series A, B)',
    'Late Stage (Series C+)',
    'Strategic Investments',
    'Acquisition Opportunities',
    'Follow-on Investments',
  ];

  const roleLabel = userRole === 'investor' ? 'Investor' : 'Project Owner';

  // Handle input change
  const handleInputChange = (field: keyof EnhancedSignupRequest, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    setError(null);
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  // Validation function
  const validateForm = (): boolean => {
    const newErrors: {[key: string]: string} = {};

    if (!formData.first_name.trim()) {
      newErrors.first_name = 'First name is required';
    }

    if (!formData.last_name.trim()) {
      newErrors.last_name = 'Last name is required';
    }

    if (!formData.location.trim()) {
      newErrors.location = 'Location is required';
    }

    if (!bio.trim()) {
      newErrors.bio = 'Professional bio is required';
    } else if (bio.length < 50) {
      newErrors.bio = 'Bio must be at least 50 characters';
    }

    if (formData.user_type === 'investor') {
      if (!formData.preferred_category) {
        newErrors.preferred_category = 'Please select a preferred industry';
      }

      if (!formData.investment_range) {
        newErrors.investment_range = 'Please select an investment range';
      }

      if (!formData.current_portfolio_size) {
        newErrors.current_portfolio_size = 'Please select your portfolio size';
      }

      if (investmentFocusList.length === 0) {
        newErrors.investment_focus_list = 'Please select at least one investment focus area';
      }
    }

    if (formData.linkedin && !isValidUrl(formData.linkedin)) {
      newErrors.linkedin = 'Please enter a valid LinkedIn URL';
    }

    if (formData.website_url && !isValidUrl(formData.website_url)) {
      newErrors.website_url = 'Please enter a valid website URL';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const isValidUrl = (url: string): boolean => {
    try {
      new URL(url);
      return true;
    } catch {
      return false;
    }
  };

  // Handle resubmission
  const handleResubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm()) {
      return;
    }

    setIsLoading(true);
    setError(null);

    try {
      // Prepare enhanced form data with all new fields
      const enhancedFormData = {
        ...formData,
        bio,
        experience_level: experienceLevel,
        investment_focus_list: investmentFocusList.join(', '),
        accredited_investor: accreditedInvestor,
      };

      // Use the resubmit endpoint instead of regular signup
      const response = await authEnhancedService.resubmitApplication(enhancedFormData);

      if (response.data) {
        setSuccess('Application resubmitted successfully! We will review it again.');
        setTimeout(() => {
          onResubmissionSuccess?.();
        }, 2000);
      } else {
        setError(response.error || 'Resubmission failed');
      }
    } catch (error) {
      setError('Network error. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  // Check if form can be submitted
  const canSubmit = formData.first_name && formData.last_name && formData.location &&
                   bio && bio.length >= 50 &&
                   (formData.user_type !== 'investor' ||
                    (formData.preferred_category && formData.investment_range &&
                     formData.current_portfolio_size && investmentFocusList.length > 0));

  if (showResubmissionForm) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
        <div className="sm:mx-auto sm:w-full sm:max-w-4xl">
          <div className="bg-white rounded-2xl shadow-xl overflow-hidden">
            {/* Header */}
            <div className="bg-gradient-to-r from-blue-600 to-indigo-600 p-8 text-white text-center">
              <div className="w-20 h-20 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4">
                <Edit className="w-10 h-10" />
              </div>
              <h2 className="text-3xl font-bold mb-2">
                Update Your Application
              </h2>
              <p className="text-blue-100 text-lg">
                Complete your {roleLabel.toLowerCase()} profile to get approved
              </p>
              <div className="flex items-center justify-center mt-4 space-x-2">
                <div className="w-8 h-2 bg-white/50 rounded-full"></div>
                <div className="w-8 h-2 bg-white rounded-full"></div>
                <div className="w-8 h-2 bg-white/50 rounded-full"></div>
              </div>
              <p className="text-sm text-blue-100 mt-2">Step 2 of 3 - Profile Update</p>
            </div>

            <div className="p-8">

              {/* Rejection Reason */}
              <div className="bg-red-50 border border-red-200 rounded-lg p-6 mb-8">
                <div className="flex items-start">
                  <AlertTriangle className="h-6 w-6 text-red-600 mt-0.5 mr-3 flex-shrink-0" />
                  <div>
                    <h3 className="text-red-800 font-semibold text-lg">Reason for Rejection</h3>
                    <p className="text-red-700 text-sm mt-2">{rejectionReason}</p>
                  </div>
                </div>
              </div>

              {/* Resubmission Form */}
              <form onSubmit={handleResubmit} className="space-y-8">
                {/* Personal Information Section */}
                <div>
                  <h3 className="text-xl font-semibold text-gray-900 mb-6 flex items-center">
                    <User className="w-6 h-6 mr-2 text-blue-600" />
                    Personal Information
                  </h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label htmlFor="first_name" className="block text-sm font-medium text-gray-700 mb-1">
                    First Name *
                  </label>
                  <div className="relative">
                    <User className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
                    <input
                      id="first_name"
                      type="text"
                      value={formData.first_name}
                      onChange={(e) => handleInputChange('first_name', e.target.value)}
                      className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      placeholder="Enter first name"
                      required
                    />
                  </div>
                </div>

                <div>
                  <label htmlFor="last_name" className="block text-sm font-medium text-gray-700 mb-1">
                    Last Name *
                  </label>
                  <div className="relative">
                    <User className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
                    <input
                      id="last_name"
                      type="text"
                      value={formData.last_name}
                      onChange={(e) => handleInputChange('last_name', e.target.value)}
                      className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      placeholder="Enter last name"
                      required
                    />
                  </div>
                  </div>
                </div>

                {/* Contact Information Section */}
                <div>
                  <h3 className="text-xl font-semibold text-gray-900 mb-6 flex items-center">
                    <Mail className="w-6 h-6 mr-2 text-blue-600" />
                    Contact Information
                  </h3>

                  {/* Email (read-only) */}
                  <div className="mb-6">
                <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
                  Email Address
                </label>
                <div className="relative">
                  <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
                  <input
                    id="email"
                    type="email"
                    value={formData.email}
                    className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg bg-gray-50"
                    disabled
                  />
                </div>
                    <p className="text-xs text-gray-500 mt-1">Email cannot be changed</p>
                  </div>

                  {/* Company and Location */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label htmlFor="company" className="block text-sm font-medium text-gray-700 mb-1">
                    Company/Organization
                  </label>
                  <div className="relative">
                    <Building className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
                    <input
                      id="company"
                      type="text"
                      value={formData.company}
                      onChange={(e) => handleInputChange('company', e.target.value)}
                      className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      placeholder="Enter company name"
                    />
                  </div>
                </div>

                <div>
                  <label htmlFor="location" className="block text-sm font-medium text-gray-700 mb-1">
                    Location
                  </label>
                  <div className="relative">
                    <MapPin className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
                    <input
                      id="location"
                      type="text"
                      value={formData.location}
                      onChange={(e) => handleInputChange('location', e.target.value)}
                      className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      placeholder="Enter location"
                    />
                  </div>
                  </div>

                  {/* Phone and Telegram */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label htmlFor="phone_number" className="block text-sm font-medium text-gray-700 mb-1">
                    Phone Number
                  </label>
                  <div className="relative">
                    <Phone className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
                    <input
                      id="phone_number"
                      type="tel"
                      value={formData.phone_number}
                      onChange={(e) => handleInputChange('phone_number', e.target.value)}
                      className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      placeholder="Enter phone number"
                    />
                  </div>
                </div>

                <div>
                  <label htmlFor="telegram_handle" className="block text-sm font-medium text-gray-700 mb-1">
                    Telegram Handle
                  </label>
                  <div className="relative">
                    <span className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 text-sm">@</span>
                    <input
                      id="telegram_handle"
                      type="text"
                      value={formData.telegram_handle}
                      onChange={(e) => handleInputChange('telegram_handle', e.target.value)}
                      className="w-full pl-8 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      placeholder="username"
                    />
                  </div>
                  </div>

                  {/* Professional Links */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label htmlFor="website_url" className="block text-sm font-medium text-gray-700 mb-1">
                    Website
                  </label>
                  <div className="relative">
                    <Globe className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
                    <input
                      id="website_url"
                      type="url"
                      value={formData.website_url}
                      onChange={(e) => handleInputChange('website_url', e.target.value)}
                      className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      placeholder="Enter website URL"
                    />
                  </div>
                </div>

                <div>
                  <label htmlFor="linkedin" className="block text-sm font-medium text-gray-700 mb-1">
                    LinkedIn Profile
                  </label>
                  <div className="relative">
                    <Globe className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
                    <input
                      id="linkedin"
                      type="url"
                      value={formData.linkedin}
                      onChange={(e) => handleInputChange('linkedin', e.target.value)}
                      className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      placeholder="LinkedIn profile URL"
                    />
                  </div>
                  </div>
                </div>

                {/* Professional Bio */}
                <div>
                  <h3 className="text-xl font-semibold text-gray-900 mb-6 flex items-center">
                    <FileText className="w-6 h-6 mr-2 text-blue-600" />
                    Professional Background
                  </h3>
                  <div>
                    <label htmlFor="bio" className="block text-sm font-medium text-gray-700 mb-2">
                      Professional Bio *
                    </label>
                    <textarea
                      id="bio"
                      value={bio}
                      onChange={(e) => setBio(e.target.value)}
                      rows={4}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                      placeholder="Tell us about your professional background, expertise, and what you're looking for..."
                    />
                    <p className="text-sm text-gray-500 mt-1">
                      {bio.length}/500 characters (minimum 50)
                    </p>
                  </div>
                </div>

                {/* Investor-specific fields */}
                {formData.user_type === 'investor' && (
                  <div className="bg-gradient-to-r from-indigo-50 to-blue-50 rounded-xl p-8">
                    <h3 className="text-xl font-semibold text-gray-900 mb-6 flex items-center">
                      <TrendingUp className="w-6 h-6 mr-2 text-blue-600" />
                      Investment Profile
                    </h3>

                    {/* Experience Level */}
                    <div className="mb-6">
                      <label className="block text-sm font-medium text-gray-700 mb-3">
                        Investment Experience Level *
                      </label>
                      <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                        {experienceLevels.map((level) => (
                          <label
                            key={level.value}
                            className={`relative flex flex-col items-center p-4 border-2 rounded-lg cursor-pointer transition-all duration-200 ${
                              experienceLevel === level.value
                                ? 'border-blue-500 bg-blue-50 text-blue-700'
                                : 'border-gray-300 hover:border-gray-400'
                            }`}
                          >
                            <input
                              type="radio"
                              name="experienceLevel"
                              value={level.value}
                              checked={experienceLevel === level.value}
                              onChange={(e) => setExperienceLevel(e.target.value)}
                              className="sr-only"
                            />
                            <span className="font-medium text-sm">{level.label}</span>
                            <span className="text-xs text-center mt-1 text-gray-500">{level.description}</span>
                          </label>
                        ))}
                      </div>
                    </div>

                    {/* Investment Focus */}
                    <div className="mb-6">
                      <label className="block text-sm font-medium text-gray-700 mb-3">
                        Investment Focus (select all that apply)
                      </label>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                        {investmentFocusOptions.map((focus) => (
                          <label
                            key={focus}
                            className={`flex items-center p-3 border rounded-lg cursor-pointer transition-all ${
                              investmentFocusList.includes(focus)
                                ? 'border-blue-500 bg-blue-50 text-blue-700'
                                : 'border-gray-300 hover:border-gray-400'
                            }`}
                          >
                            <input
                              type="checkbox"
                              checked={investmentFocusList.includes(focus)}
                              onChange={() => {
                                setInvestmentFocusList(prev =>
                                  prev.includes(focus)
                                    ? prev.filter(f => f !== focus)
                                    : [...prev, focus]
                                );
                              }}
                              className="mr-3 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                            />
                            <span className="text-sm">{focus}</span>
                          </label>
                        ))}
                      </div>
                    </div>

                    {/* Investment Description */}
                    <div className="mb-6">
                      <label htmlFor="investment_focus" className="block text-sm font-medium text-gray-700 mb-2">
                        Investment Approach & Strategy
                      </label>
                      <textarea
                        id="investment_focus"
                        value={formData.investment_focus}
                        onChange={(e) => handleInputChange('investment_focus', e.target.value)}
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        placeholder="Describe your investment approach, criteria, and what you look for in opportunities..."
                        rows={3}
                      />
                    </div>

                    {/* Investment Details Grid */}
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                      <div>
                        <label htmlFor="preferred_category" className="flex items-center space-x-2 text-sm font-medium text-gray-700 mb-2">
                          <Target className="w-4 h-4" />
                          <span>Preferred Industry *</span>
                        </label>
                        <select
                          id="preferred_category"
                          value={formData.preferred_category}
                          onChange={(e) => handleInputChange('preferred_category', e.target.value)}
                          className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                        >
                          <option value="">Select industry</option>
                          {investmentCategories.map(category => (
                            <option key={category} value={category}>{category}</option>
                          ))}
                        </select>
                      </div>

                      <div>
                        <label htmlFor="investment_range" className="flex items-center space-x-2 text-sm font-medium text-gray-700 mb-2">
                          <DollarSign className="w-4 h-4" />
                          <span>Investment Range *</span>
                        </label>
                        <select
                          id="investment_range"
                          value={formData.investment_range}
                          onChange={(e) => handleInputChange('investment_range', e.target.value)}
                          className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                        >
                          <option value="">Select range</option>
                          {investmentRanges.map(range => (
                            <option key={range} value={range}>{range}</option>
                          ))}
                        </select>
                      </div>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                      <div>
                        <label htmlFor="current_portfolio_size" className="block text-sm font-medium text-gray-700 mb-2">
                          Current Portfolio Size *
                        </label>
                        <select
                          id="current_portfolio_size"
                          value={formData.current_portfolio_size}
                          onChange={(e) => handleInputChange('current_portfolio_size', e.target.value)}
                          className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                        >
                          <option value="">Select portfolio size</option>
                          {portfolioSizes.map(size => (
                            <option key={size} value={size}>{size}</option>
                          ))}
                        </select>
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Accredited Investor Status
                        </label>
                        <label className="flex items-center space-x-3 p-3 border border-gray-300 rounded-lg cursor-pointer hover:bg-gray-50 transition-colors">
                          <input
                            type="checkbox"
                            checked={accreditedInvestor}
                            onChange={(e) => setAccreditedInvestor(e.target.checked)}
                            className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                          />
                          <span className="text-sm text-gray-700">I am an accredited investor</span>
                        </label>
                      </div>
                    </div>

                    {/* Past Investments */}
                    <div>
                      <label htmlFor="past_investments" className="block text-sm font-medium text-gray-700 mb-2">
                        Investment Experience & Track Record
                      </label>
                      <textarea
                        id="past_investments"
                        value={formData.past_investments}
                        onChange={(e) => handleInputChange('past_investments', e.target.value)}
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                        placeholder="Describe your investment experience, notable investments, and track record..."
                        rows={3}
                      />
                    </div>
                  </div>
                )}

              {/* Error Messages */}
              {error && (
                <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                  <p className="text-red-800 text-sm">{error}</p>
                </div>
              )}

              {/* Success Messages */}
              {success && (
                <div className="bg-green-50 border border-green-200 rounded-lg p-4 flex items-start">
                  <CheckCircle className="h-5 w-5 text-green-600 mt-0.5 mr-3 flex-shrink-0" />
                  <p className="text-green-800 text-sm">{success}</p>
                </div>
              )}

                {/* Navigation Buttons */}
                <div className="flex justify-between pt-8 border-t">
                  <button
                    type="button"
                    onClick={() => setShowResubmissionForm(false)}
                    className="flex items-center space-x-2 px-6 py-3 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
                  >
                    <ArrowLeft className="w-5 h-5" />
                    <span>Back</span>
                  </button>

                  <button
                    type="submit"
                    disabled={isLoading}
                    className={`flex items-center space-x-2 px-8 py-3 rounded-lg font-medium transition-all duration-200 ${
                      isLoading
                        ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                        : 'bg-blue-600 hover:bg-blue-700 text-white shadow-md hover:shadow-lg'
                    }`}
                  >
                    {isLoading ? (
                      <Loader2 className="w-5 h-5 animate-spin" />
                    ) : (
                      <>
                        <span>Submit Updated Application</span>
                        <ArrowRight className="w-5 h-5" />
                      </>
                    )}
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
      <div className="sm:mx-auto sm:w-full sm:max-w-2xl">
        <div className="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
          {/* Header */}
          <div className="text-center mb-8">
            <div className="mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-red-100 mb-4">
              <XCircle className="h-8 w-8 text-red-600" />
            </div>
            <h2 className="text-2xl font-bold text-gray-900">
              Application Rejected
            </h2>
            <p className="mt-2 text-sm text-gray-600">
              Your {roleLabel.toLowerCase()} application needs some adjustments
            </p>
          </div>

          {/* Rejection Information */}
          <div className="space-y-6">
            <div className="bg-red-50 border border-red-200 rounded-lg p-4">
              <div className="flex items-start">
                <AlertTriangle className="h-5 w-5 text-red-600 mt-0.5 mr-3 flex-shrink-0" />
                <div>
                  <h3 className="text-red-800 font-medium">Reason for Rejection</h3>
                  <p className="text-red-700 text-sm mt-1">{rejectionReason}</p>
                </div>
              </div>
            </div>

            {/* What You Can Do */}
            <div className="space-y-4">
              <h3 className="text-lg font-medium text-gray-900">What you can do:</h3>

              <div className="space-y-3">
                <div className="flex items-start">
                  <div className="flex-shrink-0">
                    <div className="flex items-center justify-center h-6 w-6 rounded-full bg-blue-100">
                      <RefreshCw className="h-4 w-4 text-blue-600" />
                    </div>
                  </div>
                  <div className="ml-3">
                    <p className="text-sm text-gray-600">
                      <strong>Update your application</strong> - Address the concerns mentioned in the rejection reason
                    </p>
                  </div>
                </div>

                <div className="flex items-start">
                  <div className="flex-shrink-0">
                    <div className="flex items-center justify-center h-6 w-6 rounded-full bg-blue-100">
                      <span className="text-blue-600 text-sm font-medium">2</span>
                    </div>
                  </div>
                  <div className="ml-3">
                    <p className="text-sm text-gray-600">
                      <strong>Resubmit for review</strong> - Your updated application will be reviewed again
                    </p>
                  </div>
                </div>

                <div className="flex items-start">
                  <div className="flex-shrink-0">
                    <div className="flex items-center justify-center h-6 w-6 rounded-full bg-green-100">
                      <CheckCircle className="h-4 w-4 text-green-600" />
                    </div>
                  </div>
                  <div className="ml-3">
                    <p className="text-sm text-gray-600">
                      <strong>Get approved</strong> - Once approved, you'll gain full access to the platform
                    </p>
                  </div>
                </div>
              </div>
            </div>

            {/* Action Buttons */}
            <div className="space-y-3">
              <button
                onClick={() => setShowResubmissionForm(true)}
                className="w-full bg-blue-600 text-white py-3 px-4 rounded-lg hover:bg-blue-700 flex items-center justify-center"
              >
                <Edit className="h-5 w-5 mr-2" />
                Update Application
              </button>

              {onBackToLogin && (
                <button
                  onClick={onBackToLogin}
                  className="w-full py-3 px-4 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
                >
                  Back to Login
                </button>
              )}
            </div>

            {/* Support Information */}
            <div className="border-t border-gray-200 pt-6">
              <p className="text-sm text-gray-500 text-center">
                Need help? Contact us at{' '}
                <a href="mailto:support@zuvomo.com" className="text-blue-600 hover:text-blue-500">
                  support@zuvomo.com
                </a>
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default RejectionScreen;